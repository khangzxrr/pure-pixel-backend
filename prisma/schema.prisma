// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maxPhotoQuota   BigInt @default(0)
  maxPackageCount BigInt @default(0)

  photoQuotaUsage BigInt @default(0)
  packageCount    BigInt @default(0)

  avatar String @default("https://s3-hcm-r1.s3cloud.vn/sftpgo/avatar%2Favatar.png")
  cover  String @default("https://s3-hcm-r1.s3cloud.vn/sftpgo/avatar%2Fcover.jpg")

  name        String   @default("")
  mail        String   @default("")
  phonenumber String   @default("")
  socialLinks String[]
  expertises  String[]
  location    String   @default("")
  quote       String   @default("")

  ftpUsername String @default("")
  ftpPassword String @default("")

  photos        Photo[]
  upgradeOrders UpgradeOrder[]

  Comment Comment[]
  Vote    Vote[]

  followers  Follow[] @relation("follower")
  followings Follow[] @relation("following")

  bankInfos BankInfo[]

  toUserTransactions UserToUserTransaction[] @relation("toUser")

  transactions Transaction[]
  PhotoBuy     PhotoBuy[]

  photoshootPackages PhotoshootPackage[]
  reports            Report[]
  reportResponses    ReportResponse[]
  blogs              Blog[]
  notifications      Notification[]
  bookings           Booking[]
  reviews            Review[]

  bookmarks     Bookmark[]
  chatrooms     Chatroom[]
  chatmessages  ChatMessage[]
  cameras       Camera[]
  cameraOnUsers CameraOnUsers[]
}

model BankInfo {
  id String @id @unique @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bankName     String
  bankNumber   String  @unique
  bankUsername String
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?

  withdrawalTransactions WithdrawalTransaction[]
}

model Follow {
  follower   User   @relation(name: "follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation(name: "following", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())

  @@id([followerId, followingId])
}

enum TransactionType {
  UPGRADE_TO_PHOTOGRAPHER
  IMAGE_SELL
  IMAGE_BUY
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
  CANCEL
}

enum PaymentMethod {
  WALLET
  SEPAY
}

model Transaction {
  id String @id @unique @default(uuid())

  paymentPayload Json
  paymentMethod  PaymentMethod
  type           TransactionType
  status         TransactionStatus @default(PENDING)

  amount Decimal
  fee    Decimal @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  fromUserTransaction UserToUserTransaction? @relation("fromUserTransaction")
  toUserTransaction   UserToUserTransaction? @relation("toUserTransaction")

  withdrawalTransaction WithdrawalTransaction?
  depositTransaction    DepositTransaction?
  serviceTransaction    ServiceTransaction?
}

model UserToUserTransaction {
  id String @id @unique @default(uuid())

  toUser   User   @relation(name: "toUser", fields: [toUserId], references: [id])
  toUserId String

  fromUserTransaction   Transaction @relation(name: "fromUserTransaction", fields: [fromUserTransactionId], references: [id])
  fromUserTransactionId String      @unique

  toUserTransaction   Transaction? @relation(name: "toUserTransaction", fields: [toUserTransactionId], references: [id])
  toUserTransactionId String?      @unique

  photoBuy PhotoBuy?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WithdrawalTransaction {
  id String @id @unique @default(uuid())

  bankInfo   BankInfo @relation(fields: [bankInfoId], references: [id])
  bankInfoId String

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DepositTransaction {
  id String @id @unique @default(uuid())

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceTransaction {
  id String @id @unique @default(uuid())

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  upgradeOrder UpgradeOrder?
}

enum UpgradeOrderStatus {
  ACTIVE
  EXPIRE
  PENDING
  CANCEL
}

model UpgradeOrder {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiredAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status UpgradeOrderStatus @default(PENDING)

  serviceTransaction   ServiceTransaction @relation(fields: [serviceTransactionId], references: [id])
  serviceTransactionId String             @unique

  upgradePackageHistory   UpgradePackageHistory @relation(fields: [upgradePackageHistoryId], references: [id])
  upgradePackageHistoryId String                @unique
}

model UpgradePackageHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  price Decimal @default(0)

  minOrderMonth Int @default(0)

  maxPhotoQuota   BigInt @default(0)
  maxPackageCount BigInt @default(0)

  descriptions String[]

  originalUpgradePackage   UpgradePackage @relation(fields: [originalUpgradePackageId], references: [id])
  originalUpgradePackageId String

  upgradeOrder UpgradeOrder?
}

enum UpgradePackageStatus {
  ENABLED
  DISABLED
}

model UpgradePackage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String  @unique
  price Decimal @default(0)

  minOrderMonth Int @default(0)

  maxPhotoQuota   BigInt @default(0)
  maxPackageCount BigInt @default(0)

  descriptions String[]

  status UpgradePackageStatus

  deletedAt DateTime?

  upgradePackageHistories UpgradePackageHistory[]
}

model PopularCameraTimeline {
  id String @id @default(uuid())

  timestamp DateTime @unique

  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  popularCameraDataPoints PopularCameraDataPoint[]
}

model PopularCameraDataPoint {
  id String @id @default(uuid())

  camera   Camera @relation(fields: [cameraId], references: [id])
  cameraId String

  timeline   PopularCameraTimeline @relation(fields: [timelineId], references: [id])
  timelineId String

  userCount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cameraId, timelineId])
}

model CameraMaker {
  id String @id @default(uuid())

  name      String @unique
  thumbnail String

  cameras Camera[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Camera {
  id String @id @default(uuid())

  name      String @unique
  thumbnail String

  cameraMaker   CameraMaker @relation(fields: [cameraMakerId], references: [id])
  cameraMakerId String

  photos Photo[]
  users  User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cameraOnUsers           CameraOnUsers[]
  popularCameraDataPoints PopularCameraDataPoint[]
}

model CameraOnUsers {
  camera   Camera @relation(fields: [cameraId], references: [id])
  cameraId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  @@id([cameraId, userId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  photos Photo[]
}

enum PhotoType {
  RAW
  EDITED
}

enum PhotoVisibility {
  PUBLIC
  PRIVATE
  SHARE_LINK
}

enum PhotoStatus {
  PENDING
  PARSED
  VERIFYING
}

model Photo {
  id String @id @default(uuid())

  photographer   User   @relation(fields: [photographerId], references: [id])
  photographerId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  camera   Camera? @relation(fields: [cameraId], references: [id])
  cameraId String?

  title String

  width  Int
  height Int

  watermark Boolean @default(false)

  exif Json

  description String

  originalPhotoUrl  String
  watermarkPhotoUrl String

  photoType PhotoType

  visibility PhotoVisibility @default(PUBLIC)

  status PhotoStatus @default(PENDING)

  size Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  comments      Comment[]
  votes         Vote[]
  photoSellings PhotoSell[]
  photoTags     PhotoTag[]
  bookmarks     Bookmark[]
}

model Chatroom {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  chatmessages ChatMessage[]
}

model ChatMessage {
  id String @id @default(uuid())

  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  message String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PhotoTag {
  id String @id @default(uuid())

  name String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  @@unique([name, photoId])
}

model PhotoSell {
  id String @id @default(uuid())

  active Boolean @default(false)

  price Decimal

  description String

  colorGradingPhotoUrl          String @default("")
  colorGradingPhotoWatermarkUrl String @default("")

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photoBuys PhotoBuy[]
}

model PhotoBuy {
  id String @id @default(uuid())

  photoSell   PhotoSell @relation(fields: [photoSellId], references: [id])
  photoSellId String

  userToUserTransaction   UserToUserTransaction @relation(fields: [userToUserTransactionId], references: [id])
  userToUserTransactionId String                @unique

  resolution String

  buyer   User   @relation(fields: [buyerId], references: [id])
  buyerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([photoSellId, buyerId, resolution])
}

model Bookmark {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  @@unique([userId, photoId])
}

model Vote {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  isUpvote Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, photoId])
}

model Comment {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  parent   Comment? @relation("parentComment", fields: [parentId], references: [id])
  parentId String?

  replies Comment[] @relation("parentComment")

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportStatus {
  OPEN
  WAITING_FEEDBACK
  RESPONSED
  CLOSED
}

enum ReportType {
  USER
  PHOTO
  BOOKING
  COMMENT
}

model Report {
  id String @id @default(uuid())

  reportStatus ReportStatus

  reportType ReportType

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String

  referenceId String

  archived Boolean

  response ReportResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReportResponse {
  id String @id @default(uuid())

  report   Report @relation(fields: [reportId], references: [id])
  reportId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BlogStatus {
  ENABLED
  DISABLED
}

model Blog {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status BlogStatus @default(ENABLED)

  title     String
  content   String
  thumbnail String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PhotoshootPackageStatus {
  ENABLED
  DISABLED
}

model PhotoshootPackageShowcasePhoto {
  id       String @id @default(uuid())
  photoUrl String

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  PhotoshootPackage   PhotoshootPackage? @relation(fields: [photoshootPackageId], references: [id])
  photoshootPackageId String?
}

model PhotoshootPackage {
  id          String  @id @default(uuid())
  title       String
  subtitle    String
  price       Decimal
  thumbnail   String
  description String

  status PhotoshootPackageStatus

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  showcases PhotoshootPackageShowcasePhoto[]
  reviews   Review[]
  bookings  Booking[]
  history   PhotoshootPackageHistory[]
}

model PhotoshootPackageHistory {
  id        String  @id @default(uuid())
  title     String
  subtitle  String
  price     Decimal
  thumbnail String

  originalPhotoshootPackage   PhotoshootPackage @relation(fields: [originalPhotoshootPackageId], references: [id])
  originalPhotoshootPackageId String

  booking Booking[]
}

enum NotificationStatus {
  SHOW
  HIDE
}

enum NotificationType {
  IN_APP
  EMAIL
  BOTH_INAPP_EMAIL
}

enum NotificationReferenceType {
  BOOKING
  CHAT
  UPGRADE_PACKAGE
  PHOTO_SELL
  PHOTO_BUY
  PHOTO
}

model Notification {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status NotificationStatus @default(SHOW)
  type   NotificationType   @default(IN_APP)

  referenceType NotificationReferenceType

  title   String
  content String

  referenceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  REQUESTED
  ACCEPTED
  DENIED
  STARTED
  ENDED
  UPLOADED
  PAID
  SUCCESSED
  FAILED
}

enum BookingBillItemType {
  INCREASE
  DECREASE
}

model BookingBillItem {
  id String @id @default(uuid())

  title       String
  description String  @default("")
  price       Decimal

  type BookingBillItemType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String
}

model Booking {
  id String @id @default(uuid())

  photoshootPackageHistory   PhotoshootPackageHistory @relation(fields: [photoshootPackageHistoryId], references: [id])
  photoshootPackageHistoryId String

  startDate DateTime
  endDate   DateTime

  status      BookingStatus
  description String        @default("")

  failedReason String @default("")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  reviews   Review[]
  billItems BookingBillItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  originalPhotoshootPackage   PhotoshootPackage? @relation(fields: [originalPhotoshootPackageId], references: [id])
  originalPhotoshootPackageId String?
}

model Review {
  id String @id @default(uuid())

  star        Int
  description String

  photoshootPackage   PhotoshootPackage @relation(fields: [photoshootPackageId], references: [id])
  photoshootPackageId String

  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([bookingId, userId])
}
