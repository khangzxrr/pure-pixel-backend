// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maxPhotoCount Int @default(0)
  maxPackageCount Int @default(0)
  maxBookingPhotoCount Int @default(0) 
  maxBookingVideoCount Int @default(0)

  avatar String @default("https://s3-hcm-r1.s3cloud.vn/sftpgo/avatar%2Favatar.png")
  name   String @default("")
  quote String @default("")

  ftpUsername String @default("")
  ftpPassword String @default("")

  photos        Photo[]
  upgradeOrders UpgradeOrder[]
  transactions  Transaction[]
  Comment       Comment[]
  Vote          Vote[]
}

enum TransactionType {
  UPGRADE_TO_PHOTOGRAPHER
  IMAGE_SELL
  IMAGE_BUY
  FIRST_BOOKING_PAYMENT
  SECOND_BOOKING_PAYMENT
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
  CANCEL
}

model Transaction {
  id String @id @unique @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  paymentPayload Json
  paymentMethod  String
  type           TransactionType
  status         TransactionStatus
  amount         Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UpgradeOrder UpgradeOrder?
}

enum UpgradeOrderStatus {
  ACTIVE
  EXPIRE
  PENDING
  CANCEL
}

model UpgradeOrder {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiredAt DateTime

  originalUpgradePackage   UpgradePackage @relation(fields: [originalUpgradePackageId], references: [id])
  originalUpgradePackageId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status UpgradeOrderStatus @default(PENDING)

  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  transactionId String?      @unique

//copy from UpgradePackage
  name String 
  price Decimal @default(0)
  minOrderMonth Int @default(0)

  maxPhotoCount Int @default(0) 
  maxPackageCount Int @default(0)
  maxBookingPhotoCount Int @default(0)
  maxBookingVideoCount Int @default(0)

  descriptions String[]


}

enum UpgradePackageStatus {
  ENABLED
  DISABLED
}

model UpgradePackage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  price       Decimal @default(0)

  minOrderMonth Int @default(0)

  maxPhotoCount Int @default(0) 
  maxPackageCount Int @default(0)
  maxBookingPhotoCount Int @default(0)
  maxBookingVideoCount Int @default(0)

  descriptions String[]

  status UpgradePackageStatus

  upgradeOrders UpgradeOrder[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  photos Photo[]
}

enum PhotoType {
  RAW
  EDITED
}

enum PhotoVisibility {
  PUBLIC
  PRIVATE
  SHARE_LINK
}

enum PhotoStatus {
  PARSED
  PENDING
}

model Photo {
  id String @id @default(uuid())

  photographer   User   @relation(fields: [photographerId], references: [id])
  photographerId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  title String

  watermark Boolean @default(false)
  showExif  Boolean @default(false)

  exif         Json
  colorGrading Json

  location    String
  captureTime DateTime

  description String

  originalPhotoUrl  String
  watermarkPhotoUrl String

  thumbnailPhotoUrl          String
  watermarkThumbnailPhotoUrl String

  photoType PhotoType

  visibility PhotoVisibility @default(PUBLIC)

  status PhotoStatus @default(PENDING)

  photoTags String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  comments Comment[]
  votes    Vote[]
}

model Vote {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  isUpvote Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
