// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maxPhotoQuota        BigInt @default(0)
  maxPackageCount      BigInt @default(0)

  photoQuotaUsage        BigInt @default(0)
  packageCount           BigInt @default(0)

  avatar String @default("https://s3-hcm-r1.s3cloud.vn/sftpgo/avatar%2Favatar.png")
  cover  String @default("https://s3-hcm-r1.s3cloud.vn/sftpgo/avatar%2Fcover.jpg")

  name        String   @default("")
  mail        String   @default("")
  phonenumber String   @default("")
  socialLinks String[]
  expertises  String[]
  location    String   @default("")
  quote       String   @default("")

  ftpUsername String @default("")
  ftpPassword String @default("")

  photos        Photo[]
  upgradeOrders UpgradeOrder[]

  Comment Comment[]
  Vote    Vote[]

  followers  Follow[] @relation("follower")
  followings Follow[] @relation("following")

  bankInfos BankInfo[]

  toUserTransactions UserToUserTransaction[] @relation("toUser")

  transactions   Transaction[]
  PhotoBuy       PhotoBuy[]

  Report         Report[]
  ReportResponse ReportResponse[]
}

model BankInfo {
  id String @id @unique @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bankName     String
  bankNumber   String  @unique
  bankUsername String
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?

  withdrawalTransactions WithdrawalTransaction[]
}

model Follow {
  follower   User   @relation(name: "follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation(name: "following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

enum TransactionType {
  UPGRADE_TO_PHOTOGRAPHER
  IMAGE_SELL
  IMAGE_BUY
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
  CANCEL
}

enum PaymentMethod {
  WALLET
  SEPAY
}

model Transaction {
  id String @id @unique @default(uuid())

  paymentPayload Json
  paymentMethod  PaymentMethod
  type           TransactionType
  status         TransactionStatus @default(PENDING)

  amount Decimal
  fee    Decimal @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  fromUserTransaction UserToUserTransaction? @relation("fromUserTransaction")
  toUserTransaction   UserToUserTransaction? @relation("toUserTransaction")

  withdrawalTransaction WithdrawalTransaction?
  depositTransaction    DepositTransaction?
  serviceTransaction    ServiceTransaction?
}

model UserToUserTransaction {
  id String @id @unique @default(uuid())

  toUser   User   @relation(name: "toUser", fields: [toUserId], references: [id])
  toUserId String

  fromUserTransaction   Transaction @relation(name: "fromUserTransaction", fields: [fromUserTransactionId], references: [id])
  fromUserTransactionId String      @unique

  toUserTransaction   Transaction? @relation(name: "toUserTransaction", fields: [toUserTransactionId], references: [id])
  toUserTransactionId String?      @unique

  photoBuy PhotoBuy?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WithdrawalTransaction {
  id String @id @unique @default(uuid())

  bankInfo   BankInfo @relation(fields: [bankInfoId], references: [id])
  bankInfoId String

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DepositTransaction {
  id String @id @unique @default(uuid())

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceTransaction {
  id String @id @unique @default(uuid())

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  upgradeOrder UpgradeOrder?
}

enum UpgradeOrderStatus {
  ACTIVE
  EXPIRE
  PENDING
  CANCEL
}

model UpgradeOrder {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiredAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status UpgradeOrderStatus @default(PENDING)

  serviceTransaction   ServiceTransaction @relation(fields: [serviceTransactionId], references: [id])
  serviceTransactionId String             @unique

  upgradePackageHistory   UpgradePackageHistory @relation(fields: [upgradePackageHistoryId], references: [id])
  upgradePackageHistoryId String                @unique
}

model UpgradePackageHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  price Decimal @default(0)

  minOrderMonth Int @default(0)

  maxPhotoQuota        BigInt @default(0)
  maxPackageCount      BigInt @default(0)

  descriptions String[]

  originalUpgradePackage   UpgradePackage @relation(fields: [originalUpgradePackageId], references: [id])
  originalUpgradePackageId String

  upgradeOrder UpgradeOrder?
}

enum UpgradePackageStatus {
  ENABLED
  DISABLED
}

model UpgradePackage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  price Decimal @default(0)

  minOrderMonth Int @default(0)

  maxPhotoQuota        BigInt @default(0)
  maxPackageCount      BigInt @default(0)

  descriptions String[]

  status UpgradePackageStatus

  deletedAt DateTime?

  upgradePackageHistories UpgradePackageHistory[]

  @@unique([name, deletedAt])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  photos Photo[]
}

enum PhotoType {
  RAW
  EDITED
}

enum PhotoVisibility {
  PUBLIC
  PRIVATE
  SHARE_LINK
}

enum PhotoStatus {
  PARSED
  PENDING
}

enum ShareStatus {
  NOT_READY
  READY
  SHARED
}

model Photo {
  id String @id @default(uuid())

  photographer   User   @relation(fields: [photographerId], references: [id])
  photographerId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  title String

  watermark Boolean @default(false)
  showExif  Boolean @default(false)

  exif Json

  description String

  originalPhotoUrl  String
  watermarkPhotoUrl String

  thumbnailPhotoUrl          String
  watermarkThumbnailPhotoUrl String

  photoType PhotoType

  visibility PhotoVisibility @default(PUBLIC)

  status PhotoStatus @default(PENDING)

  shareStatus  ShareStatus @default(NOT_READY)
  sharePayload Json        @default("{}")

  size Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  comments      Comment[]
  votes         Vote[]
  photoSharings PhotoSharing[]
  photoSellings PhotoSell[]
  tags          Tag[]
}

model Tag {
  name String

  photophoto Photo  @relation(fields: [photoId], references: [id])
  photoId    String

  @@unique([name, photoId])
}

model PhotoSell {
  id String @id @default(uuid())

  active Boolean @default(false)

  price Decimal

  description String

  colorGradingPhotoUrl          String @default("")
  colorGradingPhotoWatermarkUrl String @default("")

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photoBuys PhotoBuy[]
}

model PhotoBuy {
  id String @id @default(uuid())

  photoSell   PhotoSell @relation(fields: [photoSellId], references: [id])
  photoSellId String

  userToUserTransaction   UserToUserTransaction @relation(fields: [userToUserTransactionId], references: [id])
  userToUserTransactionId String                @unique

  resolution String

  buyer   User   @relation(fields: [buyerId], references: [id])
  buyerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([photoSellId, buyerId, resolution])
}

model PhotoSharing {
  id String @id @default(uuid())

  quality       String
  sharePhotoUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  originalPhoto   Photo  @relation(fields: [originalPhotoId], references: [id])
  originalPhotoId String

  @@unique([quality, sharePhotoUrl, originalPhotoId])
}

model Vote {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  isUpvote Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  photo   Photo  @relation(fields: [photoId], references: [id])
  photoId String

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportStatus {
  OPEN
  WAITING_FEEDBACK
  RESPONSED
  CLOSED
}

enum ReportType {
  USER
  PHOTO
  BOOKING
  COMMENT
}


model Report {
  id String @id @default(uuid())

  reportStatus ReportStatus

  reportType ReportType

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String

  referenceId String

  archived Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReportResponse {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
