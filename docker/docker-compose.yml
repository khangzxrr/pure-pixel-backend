# Use postgres/example user/password credentials

services:
  redis:
    image: redis
    ports:
      - 6379:6379
    restart: always
    environment:
      REDIS_PORT: 6379

  sftpgo:
    image: drakkan/sftpgo:v2.6.2
    container_name: sftpgo
    restart: always
    ports:
      - 8080:8080
      - 2022:2022
      - 2121:2121
    environment:
      DOWNLOAD_PLUGINS: true #this is why we use this image
      SFTPGO_FTPD__BINDINGS__0__PORT: ${SFTPGO_FTP_PORT}
      #      SFTPGO_FTPD_BINDINGS__0__PORT: ${SFTPGO_FTP_PORT}
      SFTPGO_DATA_PROVIDER__DRIVER: ${SFTPGO_DRIVER}
      SFTPGO_DATA_PROVIDER__NAME: ${SFTPGO_DATABASE}
      SFTPGO_DATA_PROVIDER__HOST: ${SFTPGO_HOST}
      SFTPGO_DATA_PROVIDER__PORT: ${SFTPGO_DATABASE_PORT}
      SFTPGO_DATA_PROVIDER__USERNAME: ${SFTPGO_DATABASE_USERNAME}
      SFTPGO_DATA_PROVIDER__PASSWORD: ${SFTPGO_DATABASE_PASSWORD}
    volumes:
      - ./sftpgo:/temp/sftpgo
      - '/etc/timezone:/etc/timezone:ro'
      - '/etc/localtime:/etc/localtime:ro'

  db:
    image: postgres:16.4
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    volumes:
      - data:/var/lib/postgresql/data
      #- ./dump_db.sql:/docker-entrypoint-initdb.d/restore_db.sql
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      #POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES}

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.4
    restart: unless-stopped
    ports:
      - 8081:8080
    volumes:
      - ./realm.json:/opt/keycloak/data/import/realm.json:ro
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: ${KC_DB}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB_SCHEMA: ${KC_DB_SCHEMA}
      KC_DB_URL: ${KC_DB_URL}
      PROXY_ADDRESS_FORWARDING: true
    command: ['start-dev', '--import-realm']

volumes:
  data: {}
